#!/usr/bin/env python3
"""
Setup script for Outbound Application Performance Optimizations
"""
import os
import sys
import subprocess
from pathlib import Path

def create_directories():
    """Create necessary directories"""
    directories = [
        'logs',
        'Config',
        'cache',
        'temp'
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Created directory: {directory}")

def install_dependencies():
    """Install required dependencies"""
    print("üì¶ Installing dependencies...")
    
    try:
        # Install core dependencies
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("‚úÖ Core dependencies installed successfully")
        
        # Try to install performance dependencies
        performance_deps = ['orjson', 'aiohttp', 'psutil']
        for dep in performance_deps:
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', dep])
                print(f"‚úÖ Installed performance dependency: {dep}")
            except subprocess.CalledProcessError:
                print(f"‚ö†Ô∏è  Warning: Could not install {dep}, falling back to standard implementation")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error installing dependencies: {e}")
        return False
    
    return True

def setup_environment():
    """Setup environment variables"""
    print("‚öôÔ∏è  Setting up environment...")
    
    env_vars = {
        'ENABLE_PROFILING': 'true',
        'API_CACHE_SIZE': '256',
        'HTTP_TIMEOUT': '30',
        'LOG_FILE_PATH': 'logs/outbound_process.log'
    }
    
    env_file = Path('.env')
    with env_file.open('w') as f:
        f.write("# Outbound Application Environment Variables\n")
        f.write("# Generated by setup.py\n\n")
        
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
            print(f"‚úÖ Set {key}={value}")
    
    print(f"‚úÖ Environment configuration saved to {env_file}")

def check_system_requirements():
    """Check system requirements"""
    print("üîç Checking system requirements...")
    
    # Check Python version
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ is required")
        return False
    else:
        print(f"‚úÖ Python version: {sys.version}")
    
    # Check available memory
    try:
        import psutil
        memory = psutil.virtual_memory()
        memory_gb = memory.total / (1024**3)
        
        if memory_gb < 2:
            print(f"‚ö†Ô∏è  Warning: Low memory detected ({memory_gb:.1f}GB). Recommended: 4GB+")
        else:
            print(f"‚úÖ Available memory: {memory_gb:.1f}GB")
    except ImportError:
        print("‚ÑπÔ∏è  Could not check memory (psutil not installed yet)")
    
    return True

def run_tests():
    """Run basic functionality tests"""
    print("üß™ Running basic tests...")
    
    try:
        # Test imports
        sys.path.insert(0, '.')
        
        print("  Testing performance_config...")
        import performance_config
        print("  ‚úÖ performance_config imported successfully")
        
        print("  Testing performance_monitor...")
        import performance_monitor
        print("  ‚úÖ performance_monitor imported successfully")
        
        print("  Testing optimized_utils...")
        import optimized_utils
        print("  ‚úÖ optimized_utils imported successfully")
        
        # Test JSON functionality
        from optimized_utils import FastJSON
        test_data = {"test": "data", "number": 123}
        json_str = FastJSON.dumps(test_data)
        parsed_data = FastJSON.loads(json_str)
        assert parsed_data == test_data
        print("  ‚úÖ JSON processing test passed")
        
        print("‚úÖ All basic tests passed")
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return False

def main():
    """Main setup function"""
    print("üöÄ Outbound Application - Performance Optimization Setup")
    print("=" * 60)
    
    # Check system requirements
    if not check_system_requirements():
        print("‚ùå System requirements not met")
        return 1
    
    # Create directories
    create_directories()
    
    # Install dependencies
    if not install_dependencies():
        print("‚ùå Failed to install dependencies")
        return 1
    
    # Setup environment
    setup_environment()
    
    # Run tests
    if not run_tests():
        print("‚ö†Ô∏è  Some tests failed, but installation may still work")
    
    print("\nüéâ Setup completed successfully!")
    print("\nüìù Next steps:")
    print("1. Review and adjust settings in .env file")
    print("2. Run the application: streamlit run OutbMain_optimized.py")
    print("3. Check the Performance tab for monitoring")
    print("4. Review README_OPTIMIZATIONS.md for detailed documentation")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())